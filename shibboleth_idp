#!/usr/bin/perl
# -*- perl -*-

=head1 NAME

shibboleth_idp - Plugin to monitor shibboleth IdP requests

=head1 CONFIGURATION

Example configuration:

[shibboleth_*]
    env.logfile /opt/shibboleth-idp/logs/idp-audit.log
    env.tool /usr/local/sbin/shibboleth-audit.py

Requires the IdP Audit Log Analysis Tool - https://wiki.shibboleth.net/confluence/display/SHIB2/IdP+Audit+Log+Analysis+Tool

By default it measures based on the following flags:
 -c number of unique relying parties
 -u number of unique userids
 -l number of logins

=head1 AUTHOR

Copyright (C) 2013 Sean Porth <sporth@oit.umass.edu>

=head1 LICENSE

GNU GPLv2

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA

=cut

#v 1.0

use strict;
use Munin::Plugin;
use IPC::Open2;

my $logfile = $ENV{'logfile'} || '/opt/shibboleth-idp/logs/idp-audit.log';
my $tool = $ENV{'tool'} || '/usr/local/sbin/shibboleth-audit.py';

die "IdP Audit Log Tool is missing\n" if (! -f $tool);

my $relyp = 0;
my $unique = 0;
my $login = 0;


if ( $ARGV[0] and $ARGV[0] eq "autoconf" ) {
    print "no\n";
    exit 0;
}

if ( $ARGV[0] and $ARGV[0] eq "config" ) {
    print "graph_title IdP requests\n";
    print "graph_args --base 1000\n";
    print "graph_vlabel requests / \${graph_period}\n";
    print "graph_scale no\n";
    print "graph_category shibboleth\n";
    print "relyp.label relying parties\n";
    print "unique.label unique logins\n";
    print "logins.label total logins\n";
    exit 0;
}

if (! -f $logfile) {
    print "relyp.value U\n";
    print "unique.value U\n";
    print "logins.value U\n";
    exit 1;
}

my ($pos) = restore_state($logfile);

if (!defined($pos)) {
    # first run: do not read log file now, to avoid start spike,
    # but remember how large it is, and start from here next time
    $pos = (stat $logfile)[7];
} else {
    $pos = parseLogfile ($logfile, $pos);
}

print "relyp.value $relyp\n";
print "unique.value $unique\n";
print "logins.value $login\n";

#saves the logfile position
save_state($pos);


sub parseLogfile {
    my ($fname, $start) = @_;

    my ($logfile,$rotated) = tail_open($fname,$start);

    my $data;
    {
        # slurp mode
        local $/ = undef;
        $data = <$logfile>;
    }

    if ($data) {
        my ($in, $out);
        my $pid = open2($out, $in, $tool, '-cul', '-');

        print $in $data;
        $in->close();

        my @vars;
        while (my $line = <$out>) {
            chomp $line;
            push @vars, $line;
        }
        $out->close();
        waitpid($pid, 0);

        my @relyps = split('\s',$vars[0]);
        $relyp = $relyps[0] || 0;

        my @uniques = split('\s',$vars[1]);
        $unique = $uniques[0] || 0;

        my @logins = split('\s',$vars[2]);
        $login = $logins[0] || 0;
    }

    return tail_close($logfile);
}
